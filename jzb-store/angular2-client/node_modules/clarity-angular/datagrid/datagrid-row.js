/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, Output, EventEmitter } from "@angular/core";
import { Selection, SelectionType } from "./providers/selection";
import { RowActionService } from "./providers/row-action-service";
import { GlobalExpandableRows } from "./providers/global-expandable-rows";
import { RowExpand } from "./providers/row-expand";
import { LoadingListener } from "../loading/loading-listener";
var nbRow = 0;
var DatagridRow = (function () {
    function DatagridRow(selection, rowActionService, globalExpandable, expand) {
        this.selection = selection;
        this.rowActionService = rowActionService;
        this.globalExpandable = globalExpandable;
        this.expand = expand;
        /* reference to the enum so that template can access */
        this.SELECTION_TYPE = SelectionType;
        this._selected = false;
        this.selectedChanged = new EventEmitter(false);
        this.expandedChange = new EventEmitter(false);
        this.id = "clr-dg-row" + (nbRow++);
    }
    Object.defineProperty(DatagridRow.prototype, "selected", {
        /**
         * Indicates if the row is selected
         */
        get: function () {
            if (this.selection.selectionType === SelectionType.None) {
                return this._selected;
            }
            else {
                return this.selection.isSelected(this.item);
            }
        },
        set: function (value) {
            if (this.selection.selectionType === SelectionType.None) {
                this._selected = value;
            }
            else {
                this.selection.setSelected(this.item, value);
            }
        },
        enumerable: true,
        configurable: true
    });
    DatagridRow.prototype.toggle = function (selected) {
        if (selected === void 0) { selected = !this.selected; }
        if (selected !== this.selected) {
            this.selected = selected;
            this.selectedChanged.emit(selected);
        }
    };
    Object.defineProperty(DatagridRow.prototype, "expanded", {
        get: function () {
            return this.expand.expanded;
        },
        set: function (value) {
            this.expand.expanded = value;
        },
        enumerable: true,
        configurable: true
    });
    DatagridRow.prototype.toggleExpand = function () {
        if (this.expand.expandable) {
            this.expanded = !this.expanded;
            this.expandedChange.emit(this.expanded);
        }
    };
    return DatagridRow;
}());
export { DatagridRow };
DatagridRow.decorators = [
    { type: Component, args: [{
                selector: "clr-dg-row",
                template: "\n        <clr-dg-row-master class=\"datagrid-row-flex\">\n            <clr-dg-cell *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\" \n                class=\"datagrid-select datagrid-fixed-column\">\n                <clr-checkbox [ngModel]=\"selected\" (ngModelChange)=\"toggle($event)\"></clr-checkbox>\n            </clr-dg-cell>\n            <clr-dg-cell *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\" \n                class=\"datagrid-select datagrid-fixed-column\">\n                <div class=\"radio\">\n                    <input type=\"radio\" [id]=\"id\"  [name]=\"selection.id + '-radio'\" [value]=\"item\" \n                        [(ngModel)]=\"selection.currentSingle\">    \n                    <label for=\"{{id}}\"></label>\n                </div>\n            </clr-dg-cell>\n            <clr-dg-cell *ngIf=\"rowActionService.hasActionableRow\" \n                class=\"datagrid-row-actions datagrid-fixed-column\">\n                <ng-content select=\"clr-dg-action-overflow\"></ng-content>\n            </clr-dg-cell>\n            <clr-dg-cell *ngIf=\"globalExpandable.hasExpandableRow\" \n                class=\"datagrid-expandable-caret datagrid-fixed-column\">\n                <ng-container *ngIf=\"expand.expandable\">\n                    <button (click)=\"toggleExpand()\" *ngIf=\"!expand.loading\">\n                        <clr-icon shape=\"caret\" [dir]=\"expand.expanded?'down':'right'\"></clr-icon>\n                    </button>\n                    <div class=\"spinner spinner-sm\" *ngIf=\"expand.loading\"></div>\n                </ng-container>\n            </clr-dg-cell>\n            <ng-content  *ngIf=\"!expand.replace || !expand.expanded || expand.loading\"></ng-content>\n            \n            <ng-template *ngIf=\"expand.replace && expand.expanded && !expand.loading\" \n                [ngTemplateOutlet]=\"detail\"></ng-template>\n        </clr-dg-row-master>\n        \n        <ng-template *ngIf=\"!expand.replace && expand.expanded && !expand.loading\"\n            [ngTemplateOutlet]=\"detail\"></ng-template>\n        \n        <!-- \n            We need the \"project into template\" hack because we need this in 2 different places\n            depending on whether the details replace the row or not.\n        -->\n        <ng-template #detail>\n            <ng-content select=\"clr-dg-row-detail\"></ng-content>\n        </ng-template>\n    ",
                host: {
                    "[class.datagrid-row]": "true",
                    "[class.datagrid-selected]": "selected"
                },
                providers: [RowExpand, { provide: LoadingListener, useExisting: RowExpand }]
            },] },
];
/** @nocollapse */
DatagridRow.ctorParameters = function () { return [
    { type: Selection, },
    { type: RowActionService, },
    { type: GlobalExpandableRows, },
    { type: RowExpand, },
]; };
DatagridRow.propDecorators = {
    'item': [{ type: Input, args: ["clrDgItem",] },],
    'selected': [{ type: Input, args: ["clrDgSelected",] },],
    'selectedChanged': [{ type: Output, args: ["clrDgSelectedChange",] },],
    'expanded': [{ type: Input, args: ["clrDgExpanded",] },],
    'expandedChange': [{ type: Output, args: ["clrDgExpandedChange",] },],
};
//# sourceMappingURL=datagrid-row.js.map