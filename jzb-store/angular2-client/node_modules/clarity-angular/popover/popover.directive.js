import { Directive, Input, TemplateRef, ViewContainerRef } from "@angular/core";
import { Popover } from "./popover";
var openCount = 0;
var waiting = []; // pending create functions
var PopoverDirective = (function () {
    function PopoverDirective(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.popoverOptions = {};
    }
    Object.defineProperty(PopoverDirective.prototype, "clrPopover", {
        // TODO: current implementation only allows a single popover to be open at any given time
        // will need to revisit this when the requirements change for future components such as nested menu
        set: function (open) {
            var _this = this;
            if (open) {
                if (openCount === 0) {
                    this.createPopover();
                }
                else {
                    waiting.push(function () {
                        _this.createPopover();
                    });
                }
            }
            else {
                this.viewContainer.clear();
                this.destroyPopover();
                if (waiting.length > 0) {
                    var createPopoverFn = waiting.shift();
                    createPopoverFn();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    PopoverDirective.prototype.createPopover = function () {
        var embeddedViewRef = this.viewContainer.createEmbeddedView(this.templateRef);
        //TODO: Not sure of the risks associated with using this. Find an alternative.
        //Needed for find the correct height and width of dynamically created views
        //inside of the popover. For Eg: Button Groups
        embeddedViewRef.detectChanges();
        this._popoverInstance = new Popover(embeddedViewRef.rootNodes[0]);
        this._popoverInstance.anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions);
        openCount++;
    };
    PopoverDirective.prototype.destroyPopover = function () {
        if (this._popoverInstance) {
            this._popoverInstance.destroy();
            delete this._popoverInstance;
            openCount--;
        }
    };
    PopoverDirective.prototype.ngOnDestroy = function () {
        this.destroyPopover();
    };
    return PopoverDirective;
}());
export { PopoverDirective };
PopoverDirective.decorators = [
    { type: Directive, args: [{ selector: "[clrPopover]" },] },
];
/** @nocollapse */
PopoverDirective.ctorParameters = function () { return [
    { type: TemplateRef, },
    { type: ViewContainerRef, },
]; };
PopoverDirective.propDecorators = {
    'anchorElem': [{ type: Input, args: ["clrPopoverAnchor",] },],
    'anchorPoint': [{ type: Input, args: ["clrPopoverAnchorPoint",] },],
    'popoverPoint': [{ type: Input, args: ["clrPopoverPopoverPoint",] },],
    'popoverOptions': [{ type: Input, args: ["clrPopoverOptions",] },],
    'clrPopover': [{ type: Input },],
};
//# sourceMappingURL=popover.directive.js.map